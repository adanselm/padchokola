{"name":"Padchokola","tagline":"MIDI controller with the sense of rhythm","body":"# Presentation\r\nPadchokola is an Arduino based Midi controller which comes with some added synchronization capabilities, since it can be set as Midi Clock master or MTC (Midi Time Code) master.\r\nYou can do it yourself either from scratch using the plans and informations here, or by buying the kits on [my web store ardamat.com](http://ardamat.com).\r\n\r\n![Overview of the pedal exterior](https://raw.github.com/adanselm/padchokola/gh-pages/images/pedal_view.JPG)\r\n\r\n## Features\r\n* 3 footswitches, sending different events on short and long hold\r\n* Midi Clock master to control the tempo of your sequencer, looper, drum machine, etc.\r\n* Tap tempo for midi clock mode\r\n* Midi Timecode master to synchronize and control playback on different sources.\r\n* Rotary encoder for tempo setting (in midi clock mode), position in song in seconds (in MTC mode) or midi program change in default CC mode\r\n* 3 positions switch to choose between normal controller (CC) mode, midi clock master or MTC master mode.\r\n* 4 digit display\r\n* Arduino-based design (fully compatible with Arduino IDE given that you have an external programmer)\r\n\r\n## Licensing\r\n* Since the **board design** is based on [Adafruit's Boarduino](http://www.ladyada.net/make/boarduino/), it stays with the **Creative Commons 2.5 - Attribution - Share Alike license**. So does the 7-segment display extension.\r\n* I wrote all the **code** from scratch and decided to put it under **GPLv2**. I started with the Timer1 library to handle interruptions for the midi clock, but it happened to behave strangely at high bpm so I decided to come back to something simpler.\r\n\r\n# Make it\r\nYou can buy the kit from my webshop: [ardamat.com](http://ardamat.com)\r\n## Parts list for the whole pedal (with sync and display and 3 switches)\r\n* The 2 circuit boards\r\n* 1x rotary switch with 3 positions (for the 3 modes)\r\n* 2x Knobs to cover the switch and encoder\r\n* 1x rotary encoder that you can mount on a panel\r\n* 2x shift registers 74HC595\r\n* 1x 7 segment display, 4 digit Kingbright CC56-12EWA (common cathode)\r\n* 2x Transistor BC547A/B/C\r\n* 3x Foot switches SPDT or more complex if you know how to wire them\r\n* 3x Ceramic capacitor 0.1uf, 6.3V\r\n* 2x Ceramic capacitor 22pf, 6.3V\r\n* 1x Electrolytic Capacitor 10µF; voltage 25V\r\n* 1x Electrolytic Capacitor 100µF; voltage 6.3V\r\n* 1x Rectifier Diode 1N4001\r\n* 1x Green LED - 3mm\r\n* 1x Red LED - 3mm\r\n* 1x 2.1mm DC Barrel Jack\r\n* 1x Generic double row male header - 6 pins\r\n* 1x generic single row male header - 5 pins\r\n* 1x generic single row female header - 5 pins\r\n* 1x Atmega328-20PU micro controller\r\n* 1x 28pin socket\r\n* 1x Voltage Regulator 7805CV - 5V TO220\r\n* 1x DIN-5 jack (MIDI). Latest revisions of the board are drilled for a SDS50-J\r\n* 1x 10k Ω Resistor\r\n* 2x 1k Ω Resistor\r\n* 3x 220 Ω Resistor (1 for the main board, 2 to solder on the rotary switch)\r\n* 1x Subminiature switch KRS0611\r\n* 1x 16Mhz Crystal\r\n\r\n## Soldering of the main board\r\nThe bare circuit board:\r\n![The bare circuit board](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_1.jpg)\r\n\r\nHere I soldered the Midi connector and display female connectors on the bottom right.\r\n![soldered the Midi connector and display](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_2.JPG)\r\n\r\nThen the first part of the power supply stage: the DC connector, the diode (with the ring mark towards the top), the 100uF electrolytic capacitor at the bottom (minus sign on the bottom), and a 0.1uF ceramic capacitor right above it.\r\n![first part of the power supply](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_3.JPG)\r\n\r\nSecond part of the power supply, from left to right: 7805CV voltage regulator (with the metal part facing left, so that we can make it touch the aluminium case later for a better heat diffusion), 0.1uF ceramic capacitor, 10uF electrolytic capacitor (minus sign on top), green LED (short leg on the left), 1kOhm resistor. Now if you plug your power supply, you should see the (green) light. If not, check your soldering joints and the voltages with a multimeter.\r\n![Second part of the power supply](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_4.JPG)\r\n\r\nNow the easiest part: solder the other connectors (ICSP and main chip), and the remaining resistors (from top to bottom: R3 = 1kOhm, R1 = 10kOhm and R4 = 220Ohm).\r\n![Overview of the pedal exterior](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_5.JPG)\r\n\r\nYou're almost done now: solder the quartz oscillator and its two 22pF capacitors. All these have no polarity. It's important to solder the chip socket BEFORE the 10kOhm resistor and 22pF capacitors, because they're quite close to each other and it's easier to do it this way.\r\n![solder the quartz oscillator](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_6.JPG)\r\n\r\nHere is the board, almost complete. I just soldered the red LED (short leg on top), micro switch, and remaining 0.1uF capacitor (C2).\r\n\r\nWhat's left to solder are the wires for the various foot switches (S1 to S4 and S6 to S8), encoder (ENC) and mode switch (S5), that you'll all mount on the panel of your enclosure. So pick an appropriate wire length and start soldering them. You can also fit the micro controller in its socket. Careful with the orientation of the chip: the little mark on the chip should be oriented left, just like the socket, so that pin number 1 is the one at the bottom left corner.\r\n![Here is the board, almost complete](https://raw.github.com/adanselm/padchokola/gh-pages/images/main_build_7.JPG)\r\n\r\n## Soldering of the display board\r\nAfter the main board, the display extension is a piece of cake!\r\nHere is the naked board.\r\n![Here is the display board](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_1.JPG)\r\n\r\nStart by soldering the male header on the other side of the board. This will allow us to connect the circuit to the main board very easily.\r\n![Start by soldering the male header](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_2.JPG)\r\n\r\nThen the 4 transistors.\r\n![Then the 4 transistors](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_3.JPG)\r\n\r\nThe shift registers, oriented left (look at the half-circle mark).\r\n![The shift registers](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_4.JPG)\r\n\r\nNow the first tricky part: put an M3 screw in the hole at the bottom right corner...\r\n![put an M3 screw in the hole at the bottom right corner](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_5.JPG)\r\n\r\n... and tighten a bolt on the other side. We will see why this is needed in the next section.\r\n![tighten a bolt on the other side](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_6.JPG)\r\n\r\nNow the second tricky part: **rotate the board upside down** before soldering the display!\r\n![soldering the display](https://raw.github.com/adanselm/padchokola/gh-pages/images/disp_build_7.JPG)\r\n\r\n## Assembly\r\nIf you did your homework well, your display board should fit right on top of the main board.\r\n![soldering the display](https://raw.github.com/adanselm/padchokola/gh-pages/images/assembly_build_1.JPG)\r\n\r\nConnect the male and female (DISP) headers on the two boards. The screw we placed earlier aligns itself with a hole in the center of the main board. You can use other bolts here to tighten this up.\r\n![soldering the display](https://raw.github.com/adanselm/padchokola/gh-pages/images/assembly_build_2.JPG)\r\n\r\n## Circuit\r\nCircuits were drawn using [Fritzing](http://fritzing.org/download/) Free software.\r\nCheck out the files with the extension \"fzz\" in the repository. You can print the circuit from there.\r\n\r\nYou can also prototype the pedal using an Arduino Uno and do the following circuit:\r\n* Footswitch 1, 2 and 3 to digital pins 5, 6 and 7\r\n* Rotary switch (S5) to analog pin 0\r\n* Midi connector:\r\n * pin 4 to VCC through a 220 Ohm resistor\r\n * pin 5 to TX (also marked Digital pin 0)\r\n * pin 2 to ground\r\n* Rotary encoder pin A to D2, pin B to D3\r\n* 7 seg data pin to arduino pin 4, clock pin to pin 9, latch pin to pin 10.\r\n\r\n![Before putting it in a case](https://raw.github.com/adanselm/padchokola/gh-pages/images/all_components_assembled.JPG)\r\n\r\n## Code\r\nDownload the code from the top of this page (or click [here](https://github.com/adanselm/padchokola/zipball/master) if you're lazy), or from the [github](https://github.com/adanselm/padchokola) page, and open it in the Arduino software. If you etched your own PCB from the provided Fritzing files, you'll need an ISP programmer like USBtinyISP or equivalent to push your code to the controller. Burn a bootloader first using \"Tools > Burn bootloader\" (don't forget to select the kind of programmer you use in the menu just above) if you're using a fresh microcontroller. Then to upload your code, you need to use \"File > Upload Using a Programmer\".\r\n\r\nDon't hesitate to send pull requests to improve the code (or circuit)!\r\n\r\n## Enclosure\r\n![Drilling a hole in the case](https://raw.github.com/adanselm/padchokola/gh-pages/images/case_drilling.JPG)\r\n\r\n# How it works\r\nTODO\r\n\r\n# FAQ\r\n## Where does the name \"Padchokola\" come from?\r\nIt is a very famous (and bad) joke made even more famous with the movie [The Intouchables](http://www.imdb.com/title/tt1675434/) where the disabled guy asks his assistant for candies, and the assistant answers \"No you can't. No arms, no chocolate!\". No chocolate being \"Pas de chocolat\" in French, it became funny to use it to describe a pedal you only need your feet to operate... I told you it was bad!\r\n\r\n## Who are you?\r\nI'm Adrien (@adanselm), a professional developer. I co-founded a company called [Springbeats](http://springbeats.com) which works on music production software. I happened to need a foot controller to record myself playing the guitar. I also added some midi synchronization capabilities to better test our software. I figured it could be useful to others. I sometimes share my thoughts on entrepreneurship, music and software on [twitter](https://twitter.com/adanselm) or [google plus](https://plus.google.com/u/0/103990689367636425141/posts).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}